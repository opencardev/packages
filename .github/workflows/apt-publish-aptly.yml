name: opencardev APT Repository Upload (Aptly)

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository (e.g., opencardev/aasdk)'
        required: false
        default: 'opencardev/aasdk'
        type: string
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distribution:
        description: 'Distribution to publish to'
        required: false
        default: 'trixie'
        type: choice
        options:
          - trixie
          - bookworm
          - both
  
  repository_dispatch:
    types: [publish-apt-packages]
  
  workflow_call:
    inputs:
      source_repo:
        description: 'Source repository (e.g., opencardev/aasdk)'
        required: false
        default: 'opencardev/aasdk'
        type: string
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distribution:
        description: 'Distribution to publish to'
        required: false
        default: 'trixie'
        type: string

jobs:
  create-apt-repo:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout packages repository
      uses: actions/checkout@v4

    - name: Download artifacts from build run
      run: |
        # Handle inputs from different trigger types
        SOURCE_REPO="${{ inputs.source_repo || github.event.client_payload.source_repo || 'opencardev/aasdk' }}"
        BUILD_RUN_ID="${{ inputs.build_run_id || github.event.client_payload.build_run_id }}"
        DISTRIBUTION="${{ inputs.distribution || github.event.client_payload.distribution || 'trixie' }}"
        
        echo "Downloading artifacts from run ID: $BUILD_RUN_ID in repository: $SOURCE_REPO"
        echo "Distribution: $DISTRIBUTION"
        
        # Download all artifacts from the specified run
        gh run download $BUILD_RUN_ID --repo $SOURCE_REPO --dir ./downloaded-artifacts
        
        echo "Downloaded artifacts structure:"
        find ./downloaded-artifacts -type f -name "*.deb" | head -20
        
        # Verify we have packages
        if [ ! "$(find ./downloaded-artifacts -name "*.deb" 2>/dev/null)" ]; then
          echo "Error: No .deb packages found in build run $BUILD_RUN_ID"
          exit 1
        fi
        
        # Create a consolidated debs directory with organized structure
        mkdir -p ./debs
        
        # Copy and organize .deb files by architecture and distribution
        find ./downloaded-artifacts -name "*.deb" -type f | while read -r deb_file; do
          filename=$(basename "$deb_file")
          echo "Processing: $filename"
          
          # Determine architecture from filename
          if [[ "$filename" == *"amd64"* ]]; then
            arch_dir="amd64"
          elif [[ "$filename" == *"arm64"* ]]; then
            arch_dir="arm64"
          elif [[ "$filename" == *"armhf"* ]]; then
            arch_dir="armhf"
          else
            arch_dir="unknown"
          fi
          
          # Create architecture directory and copy file
          mkdir -p "./debs/$arch_dir"
          cp "$deb_file" "./debs/$arch_dir/"
          echo "Copied $filename to debs/$arch_dir/"
        done
        
        echo "Final debs structure:"
        find ./debs -type f -name "*.deb"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Debug GPG Configuration
      run: |
        echo "Checking GPG configuration..."
        if [ -n "${{ secrets.APT_SIGNING_KEY }}" ]; then
          echo "✅ APT_SIGNING_KEY secret is present (length: $(echo '${{ secrets.APT_SIGNING_KEY }}' | wc -c))"
        else
          echo "❌ APT_SIGNING_KEY secret is missing or empty"
        fi
        
        if [ -n "${{ secrets.APT_SIGNING_PASSPHRASE }}" ]; then
          echo "✅ APT_SIGNING_PASSPHRASE secret is present"
        else
          echo "⚠️  APT_SIGNING_PASSPHRASE secret is missing (may not be required)"
        fi

    - name: Create APT Repository for Trixie
      if: ${{ (inputs.distribution == 'trixie') || (github.event.client_payload.distribution == 'trixie') }}
      uses: jinnatar/actions-aptly-repo@v2
      with:
        name: opencardev-trixie
        repo_url: https://opencardev.github.io/packages
        repos: |
          trixie,main,\"amd64 arm64 armhf\",false,./debs/*/*.deb
        gpg_private_key: ${{ secrets.APT_SIGNING_KEY }}
        gpg_passphrase: ${{ secrets.APT_SIGNING_PASSPHRASE }}
        artifact_name: opencardev-trixie-apt-repo

    - name: Create APT Repository for Bookworm
      if: ${{ (inputs.distribution == 'bookworm') || (github.event.client_payload.distribution == 'bookworm') }}
      uses: jinnatar/actions-aptly-repo@v2
      with:
        name: opencardev-bookworm
        repo_url: https://opencardev.github.io/packages
        repos: |
          bookworm,main,\"amd64 arm64 armhf\",false,./debs/*/*.deb
        gpg_private_key: ${{ secrets.APT_SIGNING_KEY }}
        gpg_passphrase: ${{ secrets.APT_SIGNING_PASSPHRASE }}
        artifact_name: opencardev-bookworm-apt-repo

    - name: Create APT Repository for Bookworm/Trixie (Both)
      if: ${{ (inputs.distribution == 'both') || (github.event.client_payload.distribution == 'both') }}
      uses: jinnatar/actions-aptly-repo@v2
      with:
        name: opencardev-apt
        repo_url: https://opencardev.github.io/packages
        repos: |
          bookworm,main,\"amd64 arm64 armhf\",false,./debs/*/*.deb
        gpg_private_key: ${{ secrets.APT_SIGNING_KEY }}
        gpg_passphrase: ${{ secrets.APT_SIGNING_PASSPHRASE }}
        artifact_name: opencardev-apt-repo

  deploy-apt-repo:
    needs: create-apt-repo
    runs-on: ubuntu-latest
    if: always() && needs.create-apt-repo.result == 'success'
    
    steps:
    - name: Checkout packages repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download APT repository artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: opencardev-*-apt-repo
        path: ./apt-artifacts
        merge-multiple: true

    - name: Deploy to packages repository
      run: |
        echo "Current packages repo structure:"
        ls -la
        
        echo "Available APT artifacts:"
        find ./apt-artifacts -type f | head -20
        
        # Extract and deploy the apt repository
        if [ -f "./apt-artifacts/opencardev-trixie-apt-repo.tar.gz" ]; then
          echo "Extracting Trixie repository..."
          tar -xzf "./apt-artifacts/opencardev-trixie-apt-repo.tar.gz" -C .
        fi
        
        if [ -f "./apt-artifacts/opencardev-bookworm-apt-repo.tar.gz" ]; then
          echo "Extracting Bookworm repository..."
          tar -xzf "./apt-artifacts/opencardev-bookworm-apt-repo.tar.gz" -C .
        fi
        
        # Ensure GPG public key is available in the repository
        if [ ! -f "opencardev.gpg.key" ]; then
          echo "Exporting GPG public key..."
          echo "${{ secrets.APT_SIGNING_KEY }}" | gpg --import --batch --yes
          # Get the key ID from the imported key
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\) .*/\1/')
          gpg --armor --export $KEY_ID > opencardev.gpg.key
          echo "GPG public key exported to opencardev.gpg.key"
        else
          echo "GPG public key already exists"
        fi
        
        echo "Updated packages repo structure:"
        find . -name "*.deb" | head -10
        find . -name "Packages*" | head -10
        find . -name "Release*" | head -10
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Add changes
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          SOURCE_REPO="${{ inputs.source_repo || github.event.client_payload.source_repo || 'opencardev/aasdk' }}"
          BUILD_RUN_ID="${{ inputs.build_run_id || github.event.client_payload.build_run_id }}"
          DISTRIBUTION="${{ inputs.distribution || github.event.client_payload.distribution || 'trixie' }}"
          
          git commit -m "Update APT repository from $SOURCE_REPO build $BUILD_RUN_ID - Distribution: $DISTRIBUTION - Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') - Automated update via jinnatar/actions-aptly-repo@v2"
          
          echo "Pushing changes..."
          git push
          
          echo "APT repository successfully updated!"
        fi

  summary:
    needs: [create-apt-repo, deploy-apt-repo]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Summary
      run: |
        SOURCE_REPO="${{ inputs.source_repo || github.event.client_payload.source_repo || 'opencardev/aasdk' }}"
        BUILD_RUN_ID="${{ inputs.build_run_id || github.event.client_payload.build_run_id }}"
        DISTRIBUTION="${{ inputs.distribution || github.event.client_payload.distribution || 'trixie' }}"
        
        echo "## opencardev APT Repository Update Complete (Aptly)"
        echo "Source Repository: $SOURCE_REPO"
        echo "Build Run ID: $BUILD_RUN_ID"
        echo "Distribution: $DISTRIBUTION"
        echo "APT Repo Creation: ${{ needs.create-apt-repo.result }}"
        echo "Deployment: ${{ needs.deploy-apt-repo.result }}"
        echo ""
        echo "Repository URL: https://opencardev.github.io/packages"
        echo ""
        if [[ "${{ needs.create-apt-repo.result }}" == "success" && "${{ needs.deploy-apt-repo.result }}" == "success" ]]; then
          echo "✅ APT repository successfully created and deployed using Aptly!"
          echo ""
          echo "To use the repository:"
          echo "```bash"
          echo "# Add GPG key"
          echo "curl -fsSL https://opencardev.github.io/packages/opencardev.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/opencardev-archive-keyring.gpg"
          echo ""
          case "$DISTRIBUTION" in
            "trixie")
              echo "# Add Trixie repository"
              echo "echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages trixie main' | sudo tee /etc/apt/sources.list.d/opencardev.list"
              ;;
            "bookworm")
              echo "# Add Bookworm repository"
              echo "echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages bookworm main' | sudo tee /etc/apt/sources.list.d/opencardev.list"
              ;;
            "both")
              echo "# Add repositories (choose your distribution)"
              echo "# For Trixie (Debian 13):"
              echo "echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages trixie main' | sudo tee /etc/apt/sources.list.d/opencardev.list"
              echo "# For Bookworm (Debian 12):"
              echo "echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages bookworm main' | sudo tee /etc/apt/sources.list.d/opencardev.list"
              ;;
          esac
          echo ""
          echo "# Update and install"
          echo "sudo apt update"
          echo "sudo apt install libaasdk"
          echo "```"
        else
          echo "❌ APT repository update failed. Check the logs above for details."
        fi