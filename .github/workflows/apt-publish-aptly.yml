name: opencardev APT Repository Upload (Aptly)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository (e.g., opencardev/aasdk)'
        required: false
        default: 'opencardev/aasdk'
        type: string
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distribution:
        description: 'Distribution to publish to'
        required: false
        default: 'all'
        type: choice
        options:
          - trixie
          - bookworm
          - all
      apt_category:
        description: 'APT category (e.g., main, contrib, non-free)'
        required: false
        default: 'main'
        type: string
      apt_import:
        description: 'Use APT import (true/false)'
        required: false
        default: true
        type: boolean
      apt_glob:
        description: 'Glob pattern for selecting .deb files'
        required: false
        default: './debs/*/*.deb'
        type: string
  
  repository_dispatch:
    types: [publish-apt-packages]
  
  workflow_call:
    inputs:
      source_repo:
        description: 'Source repository (e.g., opencardev/aasdk)'
        required: false
        default: 'opencardev/aasdk'
        type: string
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distribution:
        description: 'Distribution to publish to'
        required: false
        default: 'trixie'
        type: string
      apt_category:
        description: 'APT category (e.g., main, contrib, non-free)'
        required: false
        default: 'main'
        type: string
      apt_import:
        description: 'Use APT import (true/false)'
        required: false
        default: true
        type: boolean
      apt_glob:
        description: 'Glob pattern for selecting .deb files'
        required: false
        default: './debs/*/*.deb'
        type: string

jobs:
  create-apt-repo:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout packages repository
      uses: actions/checkout@v4

    - name: Download artifacts from build run
      run: |
        # Handle inputs from different trigger types
        SOURCE_REPO="${{ inputs.source_repo || github.event.client_payload.source_repo || 'opencardev/aasdk' }}"
        BUILD_RUN_ID="${{ inputs.build_run_id || github.event.client_payload.build_run_id }}"
        DISTRIBUTION="${{ inputs.distribution || github.event.client_payload.distribution || 'trixie' }}"
        APT_CATEGORY="${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }}"
        APT_IMPORT="${{ inputs.apt_import || github.event.client_payload.apt_import || './debs/*/*.deb' }}"
        APT_GLOB="${{ inputs.apt_glob || github.event.client_payload.apt_glob || '' }}"
            
        echo "Downloading artifacts from run ID: $BUILD_RUN_ID in repository: $SOURCE_REPO"
        echo "Distribution: $DISTRIBUTION"
        
        # Download all artifacts from the specified run
        gh run download $BUILD_RUN_ID --repo $SOURCE_REPO --dir ./downloaded-artifacts
        
        echo "Downloaded artifacts structure:"
        find ./downloaded-artifacts -type f -name "*.deb" | head -20
        
        # Verify we have packages
        if [ ! "$(find ./downloaded-artifacts -name "*.deb" 2>/dev/null)" ]; then
          echo "Error: No .deb packages found in build run $BUILD_RUN_ID"
          exit 1
        fi
        
        # Create a consolidated debs directory with organized structure
        mkdir -p ./debs
        
        # Copy and organize .deb files by suite and architecture (supports debian, ubuntu, raspbian, etc.)
        find ./downloaded-artifacts -name "*.deb" -type f | while read -r deb_file; do
          filename=$(basename "$deb_file")
          suite="unknown"
          arch_dir="unknown"

          # Extract suite from filename (matches _<suite>_ for any word)
          if [[ "$filename" =~ _([a-zA-Z0-9]+)_ ]]; then
            suite="${BASH_REMATCH[1]}"
          fi

          # Detect architecture from filename
          if [[ "$filename" == *"amd64"* ]]; then
            arch_dir="amd64"
          elif [[ "$filename" == *"arm64"* ]]; then
            arch_dir="arm64"
          elif [[ "$filename" == *"armhf"* ]]; then
            arch_dir="armhf"
          fi

          # Only copy if suite and arch are detected
          if [[ "$suite" != "unknown" && "$arch_dir" != "unknown" ]]; then
            mkdir -p "./debs/$suite/$arch_dir"
            cp "$deb_file" "./debs/$suite/$arch_dir/"
            echo "Copied $filename to debs/$suite/$arch_dir/"
          else
            echo "Skipping $filename (suite or arch not detected)"
          fi
        done

        echo "Final debs structure:"
        find ./debs -type f -name "*.deb"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Debug GPG Configuration
      run: |
        echo "Checking GPG configuration..."
        if [ -n "${{ secrets.APT_SIGNING_KEY }}" ]; then
          echo "✅ APT_SIGNING_KEY secret is present (length: $(echo '${{ secrets.APT_SIGNING_KEY }}' | wc -c))"
        else
          echo "❌ APT_SIGNING_KEY secret is missing or empty"
        fi
        
        if [ -n "${{ secrets.APT_SIGNING_PASSPHRASE }}" ]; then
          echo "✅ APT_SIGNING_PASSPHRASE secret is present"
        else
          echo "⚠️  APT_SIGNING_PASSPHRASE secret is missing (may not be required)"
        fi

    - name: Create APT Repository for Trixie
      if: ${{ (inputs.distribution == 'trixie') || (github.event.client_payload.distribution == 'trixie') }}
      uses: jinnatar/actions-aptly-repo@v2
      with:
        name: opencardev-trixie
        repo_url: https://opencardev.github.io/packages
        repos: |
          trixie,${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }},"amd64 arm64 armhf",${{ inputs.apt_import || github.event.client_payload.apt_import || false }},${{ inputs.apt_glob || github.event.client_payload.apt_glob || './debs/*/*.deb' }}
        gpg_private_key: ${{ secrets.APT_SIGNING_KEY }}
        gpg_passphrase: ${{ secrets.APT_SIGNING_PASSPHRASE }}
        artifact_name: opencardev-trixie-apt-repo-${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }}

    - name: Create APT Repository for Bookworm
      if: ${{ (inputs.distribution == 'bookworm') || (github.event.client_payload.distribution == 'bookworm') }}
      uses: jinnatar/actions-aptly-repo@v2
      with:
        name: opencardev-bookworm
        repo_url: https://opencardev.github.io/packages
        repos: |
          bookworm,${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }},"amd64 arm64 armhf",${{ inputs.apt_import || github.event.client_payload.apt_import || false }},${{ inputs.apt_glob || github.event.client_payload.apt_glob || './debs/*/*.deb' }}
        gpg_private_key: ${{ secrets.APT_SIGNING_KEY }}
        gpg_passphrase: ${{ secrets.APT_SIGNING_PASSPHRASE }}
        artifact_name: opencardev-bookworm-apt-repo-${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }}

    - name: Create APT Repository for All Distributions
      if: ${{ (inputs.distribution == 'all') || (github.event.client_payload.distribution == 'all') }}
      uses: jinnatar/actions-aptly-repo@v2
      with:
        name: opencardev-apt
        repo_url: https://opencardev.github.io/packages
        repos: |
          trixie,${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }},"amd64 arm64 armhf",${{ inputs.apt_import || github.event.client_payload.apt_import || false }},${{ inputs.apt_glob || github.event.client_payload.apt_glob || './debs/*/*.deb' }}
          bookworm,${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }},"amd64 arm64 armhf",${{ inputs.apt_import || github.event.client_payload.apt_import || false }},${{ inputs.apt_glob || github.event.client_payload.apt_glob || './debs/*/*.deb' }}
        gpg_private_key: ${{ secrets.APT_SIGNING_KEY }}
        gpg_passphrase: ${{ secrets.APT_SIGNING_PASSPHRASE }}
        artifact_name: opencardev-apt-repo-${{ inputs.apt_category || github.event.client_payload.apt_category || 'main' }}

  deploy-apt-repo:
    needs: create-apt-repo
    runs-on: ubuntu-latest
    if: always() && needs.create-apt-repo.result == 'success'
    
    steps:
    - name: Checkout packages repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main

    - name: Download APT repository artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: opencardev-*-apt-repo-*
        path: ./apt-artifacts
        merge-multiple: true

    - name: Deploy to packages repository
      run: |
        set -euo pipefail
        echo "Current packages repo structure:"
        ls -la
        
        echo "Available APT artifacts:"
        find ./apt-artifacts -type f | head -20
        
        # Validate pool collisions by extracting to a temp dir first
        TMP_EXTRACT_DIR="./_apt_extract"
        rm -rf "$TMP_EXTRACT_DIR"
        mkdir -p "$TMP_EXTRACT_DIR"
        
        # Extract any artifacts we have into the temp dir
        for tarball in \
          ./apt-artifacts/opencardev-apt-repo-main.tar.gz \
          ./apt-artifacts/opencardev-trixie-apt-repo-main.tar.gz \
          ./apt-artifacts/opencardev-bookworm-apt-repo-main.tar.gz \
          ./apt-artifacts/opencardev-trixie-apt-repo.tar.gz \
          ./apt-artifacts/opencardev-bookworm-apt-repo.tar.gz; do
          if [ -f "$tarball" ]; then
            echo "Extracting $tarball to $TMP_EXTRACT_DIR ..."
            tar -xzf "$tarball" -C "$TMP_EXTRACT_DIR"
          fi
        done
        
        echo "Validating for pool filename collisions..."
        # Build a list of extracted pool files
        mapfile -t NEW_DEBS < <(find "$TMP_EXTRACT_DIR/pool" -type f -name "*.deb" 2>/dev/null || true)
        if [ ${#NEW_DEBS[@]} -gt 0 ]; then
          for f in "${NEW_DEBS[@]}"; do
            rel="${f#${TMP_EXTRACT_DIR}/}"
            dest="./${rel}"
            if [ -f "$dest" ]; then
              # Compare checksum to detect differing content under identical path
              old_sum=$(sha256sum "$dest" | awk '{print $1}')
              new_sum=$(sha256sum "$f" | awk '{print $1}')
              if [ "$old_sum" != "$new_sum" ]; then
                echo "::error::Collision detected for $rel with differing content."
                echo "Existing: $dest ($old_sum)"
                echo "New:      $f ($new_sum)"
                echo "Refuse to overwrite. Ensure Debian revision differs per distribution (e.g., +deb12u1 vs +deb13u1)."
                exit 1
              fi
            fi
          done
          echo "No pool collisions detected."
        else
          echo "No new pool packages found in artifacts."
        fi
        
        # Extract and deploy the apt repository
        # Handle both individual distribution artifacts and combined "all" artifacts
        if [ -f "./apt-artifacts/opencardev-apt-repo-main.tar.gz" ]; then
          echo "Extracting combined (all distributions) repository..."
          tar -xzf "./apt-artifacts/opencardev-apt-repo-main.tar.gz" -C .
        fi
        
        if [ -f "./apt-artifacts/opencardev-trixie-apt-repo-main.tar.gz" ]; then
          echo "Extracting Trixie repository..."
          tar -xzf "./apt-artifacts/opencardev-trixie-apt-repo-main.tar.gz" -C .
        fi
        
        if [ -f "./apt-artifacts/opencardev-bookworm-apt-repo-main.tar.gz" ]; then
          echo "Extracting Bookworm repository..."
          tar -xzf "./apt-artifacts/opencardev-bookworm-apt-repo-main.tar.gz" -C .
        fi
        
        # Ensure GPG public key is available in the repository
        if [ ! -f "opencardev.gpg.key" ]; then
          echo "Exporting GPG public key..."
          echo "${{ secrets.APT_SIGNING_KEY }}" | gpg --import --batch --yes
          # Get the key ID from the imported key
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\) .*/\1/')
          gpg --armor --export $KEY_ID > opencardev.gpg.key
          echo "GPG public key exported to opencardev.gpg.key"
        else
          echo "GPG public key already exists"
        fi
        
        echo "Updated packages repo structure:"
        find . -name "*.deb" | head -10
        find . -name "Packages*" | head -10
        find . -name "Release*" | head -10
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Add changes
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          SOURCE_REPO="${{ inputs.source_repo || github.event.client_payload.source_repo || 'opencardev/aasdk' }}"
          BUILD_RUN_ID="${{ inputs.build_run_id || github.event.client_payload.build_run_id }}"
          DISTRIBUTION="${{ inputs.distribution || github.event.client_payload.distribution || 'trixie' }}"
          
          git commit -m "Update APT repository from $SOURCE_REPO build $BUILD_RUN_ID - Distribution: $DISTRIBUTION - Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') - Automated update via jinnatar/actions-aptly-repo@v2"
          
          echo "Pushing changes..."
          git push
          
          echo "APT repository successfully updated!"
        fi

    - name: Trigger GitHub Pages deployment
      if: success()
      run: |
        echo "Triggering GitHub Pages deployment..."
        
        # Wait a moment for git push to complete
        sleep 5
        
        # Trigger Pages build using GitHub API
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/pages/builds
        
        echo "GitHub Pages deployment triggered!"

  deploy-pages:
    needs: deploy-apt-repo
    if: needs.deploy-apt-repo.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout latest main with APT files  
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Pull latest changes including APT files
      run: |
        git pull origin main
        
    - name: Extract APT repository to root for Pages
      run: |
        echo "=== Before extraction ==="
        ls -la
        
        # Move APT repository files from apt-artifacts to root
        if [ -d "apt-artifacts/dists" ]; then
          echo "Moving dists/ to root..."
          mv apt-artifacts/dists/ ./
        fi
        
        if [ -d "apt-artifacts/pool" ]; then
          echo "Moving pool/ to root..."
          mv apt-artifacts/pool/ ./
        fi
        
        # Clean up the apt-artifacts directory for Pages
        rm -rf apt-artifacts/
        
        echo "=== After extraction - Repository contents for Pages ==="
        ls -la
        find . -name "dists" -type d
        find . -name "pool" -type d  
        find . -name "Release*" | head -5
        echo "=== End repository contents ==="
        
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  summary:
    needs: [create-apt-repo, deploy-apt-repo, deploy-pages]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Summary
      run: |
        SOURCE_REPO="${{ inputs.source_repo || github.event.client_payload.source_repo || 'opencardev/aasdk' }}"
        BUILD_RUN_ID="${{ inputs.build_run_id || github.event.client_payload.build_run_id }}"
        DISTRIBUTION="${{ inputs.distribution || github.event.client_payload.distribution || 'trixie' }}"
        
        echo "## opencardev APT Repository Update Complete (Aptly)"
        echo "Source Repository: $SOURCE_REPO"
        echo "Build Run ID: $BUILD_RUN_ID"
        echo "Distribution: $DISTRIBUTION"
        echo "APT Repo Creation: ${{ needs.create-apt-repo.result }}"
        echo "Deployment: ${{ needs.deploy-apt-repo.result }}"
        echo "GitHub Pages (Actions): ${{ needs.deploy-pages.result }}"
        echo ""
        echo "Repository URL: https://opencardev.github.io/packages"
        echo ""
        if [[ "${{ needs.create-apt-repo.result }}" == "success" && "${{ needs.deploy-apt-repo.result }}" == "success" && "${{ needs.deploy-pages.result }}" == "success" ]]; then
          echo "✅ APT repository successfully created and deployed using Aptly!"
          echo ""
          echo "To use the repository:"
          echo '```bash'
          echo "# Add GPG key"
          echo "curl -fsSL https://opencardev.github.io/packages/opencardev.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/opencardev-archive-keyring.gpg"
          echo ""
          
          if [ "$DISTRIBUTION" = "trixie" ]; then
            echo "# Add Trixie repository"
            echo 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages trixie main" | sudo tee /etc/apt/sources.list.d/opencardev.list'
          elif [ "$DISTRIBUTION" = "bookworm" ]; then
            echo "# Add Bookworm repository"
            echo 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages bookworm main" | sudo tee /etc/apt/sources.list.d/opencardev.list'
          elif [ "$DISTRIBUTION" = "all" ]; then
            echo "# Add repositories (choose your distribution)"
            echo "# For Trixie (Debian 13):"
            echo 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages trixie main" | sudo tee /etc/apt/sources.list.d/opencardev.list'
            echo "# For Bookworm (Debian 12):"
            echo 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/opencardev-archive-keyring.gpg] https://opencardev.github.io/packages bookworm main" | sudo tee /etc/apt/sources.list.d/opencardev.list'
          fi
          
          echo ""
          echo "# Update and install"
          echo "sudo apt update"
          echo "sudo apt install libaasdk"
          echo '```'
        else
          echo "❌ APT repository update failed. Check the logs above for details."
        fi